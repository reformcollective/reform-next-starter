/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch"
	background?: string
	foreground?: string
	population?: number
	title?: string
}

export type SanityImagePalette = {
	_type: "sanity.imagePalette"
	darkMuted?: SanityImagePaletteSwatch
	lightVibrant?: SanityImagePaletteSwatch
	darkVibrant?: SanityImagePaletteSwatch
	vibrant?: SanityImagePaletteSwatch
	dominant?: SanityImagePaletteSwatch
	lightMuted?: SanityImagePaletteSwatch
	muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions"
	height?: number
	width?: number
	aspectRatio?: number
}

export type Geopoint = {
	_type: "geopoint"
	lat?: number
	lng?: number
	alt?: number
}

export type Link = {
	_type: "link"
	linkText?: string
	url?: string
}

export type Page = {
	_id: string
	_type: "page"
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	description?: string
	ogImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
	sections?: Array<{
		title?: string
		text?: string
		portableText?: Array<
			| {
					children?: Array<{
						marks?: Array<string>
						text?: string
						_type: "span"
						_key: string
					}>
					style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote"
					listItem?: "bullet" | "number"
					markDefs?: Array<{
						href?: string
						target?: "_blank" | "_parent"
						_type: "link"
						_key: string
					}>
					level?: number
					_type: "block"
					_key: string
			  }
			| {
					asset?: {
						_ref: string
						_type: "reference"
						_weak?: boolean
						[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
					}
					hotspot?: SanityImageHotspot
					crop?: SanityImageCrop
					_type: "image"
					_key: string
			  }
			| {
					asset?: {
						_ref: string
						_type: "reference"
						_weak?: boolean
						[internalGroqTypeReferenceTo]?: "sanity.fileAsset"
					}
					_type: "file"
					_key: string
			  }
			| ({
					_key: string
			  } & Youtube)
		>
		_type: "sample"
		_key: string
	}>
}

export type Youtube = {
	_type: "youtube"
	url?: string
}

export type Post = {
	_id: string
	_type: "post"
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	mainImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
	author?: {
		_ref: string
		_type: "reference"
		_weak?: boolean
		[internalGroqTypeReferenceTo]?: "author"
	}
	categories?: Array<string>
	metadataDescription?: string
	ogImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: "image"
	}
	articleText?: Array<
		| {
				children?: Array<{
					marks?: Array<string>
					text?: string
					_type: "span"
					_key: string
				}>
				style?:
					| "h1"
					| "h2"
					| "h3"
					| "h4"
					| "h5"
					| "h6"
					| "normal"
					| "blockquote"
				listItem?: "bullet" | "number"
				markDefs?: Array<{
					href?: string
					target?: "_blank" | "_parent"
					_type: "link"
					_key: string
				}>
				level?: number
				_type: "block"
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: "reference"
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
				}
				hotspot?: SanityImageHotspot
				crop?: SanityImageCrop
				_type: "image"
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: "reference"
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: "sanity.fileAsset"
				}
				_type: "file"
				_key: string
		  }
		| ({
				_key: string
		  } & Youtube)
	>
	isFeatured?: boolean
	publishDate?: string
}

export type SanityFileAsset = {
	_id: string
	_type: "sanity.fileAsset"
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	source?: SanityAssetSourceData
}

export type Author = {
	_id: string
	_type: "author"
	_createdAt: string
	_updatedAt: string
	_rev: string
	fullName?: string
	slug?: Slug
	photo?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
	roleAndCompany?: string
	biography?: string
}

export type Slug = {
	_type: "slug"
	current?: string
	source?: string
}

export type Footer = {
	_id: string
	_type: "footer"
	_createdAt: string
	_updatedAt: string
	_rev: string
	footerText?: string
}

export type Header = {
	_id: string
	_type: "header"
	_createdAt: string
	_updatedAt: string
	_rev: string
	headerText?: string
}

export type Settings = {
	_id: string
	_type: "settings"
	_createdAt: string
	_updatedAt: string
	_rev: string
	defaultTitle?: string
	defaultDescription?: string
	ogImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
}

export type SanityImageCrop = {
	_type: "sanity.imageCrop"
	top?: number
	bottom?: number
	left?: number
	right?: number
}

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot"
	x?: number
	y?: number
	height?: number
	width?: number
}

export type SanityImageAsset = {
	_id: string
	_type: "sanity.imageAsset"
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	metadata?: SanityImageMetadata
	source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData"
	name?: string
	id?: string
	url?: string
}

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata"
	location?: Geopoint
	dimensions?: SanityImageDimensions
	palette?: SanityImagePalette
	lqip?: string
	blurHash?: string
	hasAlpha?: boolean
	isOpaque?: boolean
}

export type SanityAssistInstructionTask = {
	_type: "sanity.assist.instructionTask"
	path?: string
	instructionKey?: string
	started?: string
	updated?: string
	info?: string
}

export type SanityAssistTaskStatus = {
	_type: "sanity.assist.task.status"
	tasks?: Array<
		{
			_key: string
		} & SanityAssistInstructionTask
	>
}

export type SanityAssistSchemaTypeAnnotations = {
	_type: "sanity.assist.schemaType.annotations"
	title?: string
	fields?: Array<
		{
			_key: string
		} & SanityAssistSchemaTypeField
	>
}

export type SanityAssistOutputType = {
	_type: "sanity.assist.output.type"
	type?: string
}

export type SanityAssistOutputField = {
	_type: "sanity.assist.output.field"
	path?: string
}

export type SanityAssistInstructionContext = {
	_type: "sanity.assist.instruction.context"
	reference?: {
		_ref: string
		_type: "reference"
		_weak?: boolean
		[internalGroqTypeReferenceTo]?: "assist.instruction.context"
	}
}

export type AssistInstructionContext = {
	_id: string
	_type: "assist.instruction.context"
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	context?: Array<{
		children?: Array<{
			marks?: Array<string>
			text?: string
			_type: "span"
			_key: string
		}>
		style?: "normal"
		listItem?: never
		markDefs?: null
		level?: number
		_type: "block"
		_key: string
	}>
}

export type SanityAssistInstructionUserInput = {
	_type: "sanity.assist.instruction.userInput"
	message?: string
	description?: string
}

export type SanityAssistInstructionPrompt = Array<{
	children?: Array<
		| {
				marks?: Array<string>
				text?: string
				_type: "span"
				_key: string
		  }
		| ({
				_key: string
		  } & SanityAssistInstructionFieldRef)
		| ({
				_key: string
		  } & SanityAssistInstructionContext)
		| ({
				_key: string
		  } & SanityAssistInstructionUserInput)
	>
	style?: "normal"
	listItem?: never
	markDefs?: null
	level?: number
	_type: "block"
	_key: string
}>

export type SanityAssistInstructionFieldRef = {
	_type: "sanity.assist.instruction.fieldRef"
	path?: string
}

export type SanityAssistInstruction = {
	_type: "sanity.assist.instruction"
	prompt?: SanityAssistInstructionPrompt
	icon?: string
	title?: string
	userId?: string
	createdById?: string
	output?: Array<
		| ({
				_key: string
		  } & SanityAssistOutputField)
		| ({
				_key: string
		  } & SanityAssistOutputType)
	>
}

export type SanityAssistSchemaTypeField = {
	_type: "sanity.assist.schemaType.field"
	path?: string
	instructions?: Array<
		{
			_key: string
		} & SanityAssistInstruction
	>
}

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| Geopoint
	| Link
	| Page
	| Youtube
	| Post
	| SanityFileAsset
	| Author
	| Slug
	| Footer
	| Header
	| Settings
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata
	| SanityAssistInstructionTask
	| SanityAssistTaskStatus
	| SanityAssistSchemaTypeAnnotations
	| SanityAssistOutputType
	| SanityAssistOutputField
	| SanityAssistInstructionContext
	| AssistInstructionContext
	| SanityAssistInstructionUserInput
	| SanityAssistInstructionPrompt
	| SanityAssistInstructionFieldRef
	| SanityAssistInstruction
	| SanityAssistSchemaTypeField
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./app/layout.tsx
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
	_id: string
	_type: "settings"
	_createdAt: string
	_updatedAt: string
	_rev: string
	defaultTitle?: string
	defaultDescription?: string
	ogImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
} | null
// Variable: headerQuery
// Query: *[_type == "header"][0]
export type HeaderQueryResult = {
	_id: string
	_type: "header"
	_createdAt: string
	_updatedAt: string
	_rev: string
	headerText?: string
} | null
// Variable: footerQuery
// Query: *[_type == "footer"][0]
export type FooterQueryResult = {
	_id: string
	_type: "footer"
	_createdAt: string
	_updatedAt: string
	_rev: string
	footerText?: string
} | null

// Source: ./app/sitemap.ts
// Variable: sitemapPageQuery
// Query: *[_type == "page" && defined(slug.current)]	{"slug": slug.current}
export type SitemapPageQueryResult = Array<{
	slug: string | null
}>
// Variable: sitemapBlogQuery
// Query: *[_type == "post" && defined(slug.current)]{"slug": slug.current}
export type SitemapBlogQueryResult = Array<{
	slug: string | null
}>

// Source: ./app/[slug]/page.tsx
// Variable: pageQuery
// Query: *[_type == "page" && slug.current == $slug][0]
export type PageQueryResult = {
	_id: string
	_type: "page"
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	description?: string
	ogImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
	sections?: Array<{
		title?: string
		text?: string
		portableText?: Array<
			| ({
					_key: string
			  } & Youtube)
			| {
					children?: Array<{
						marks?: Array<string>
						text?: string
						_type: "span"
						_key: string
					}>
					style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal"
					listItem?: "bullet" | "number"
					markDefs?: Array<{
						href?: string
						target?: "_blank" | "_parent"
						_type: "link"
						_key: string
					}>
					level?: number
					_type: "block"
					_key: string
			  }
			| {
					asset?: {
						_ref: string
						_type: "reference"
						_weak?: boolean
						[internalGroqTypeReferenceTo]?: "sanity.fileAsset"
					}
					_type: "file"
					_key: string
			  }
			| {
					asset?: {
						_ref: string
						_type: "reference"
						_weak?: boolean
						[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
					}
					hotspot?: SanityImageHotspot
					crop?: SanityImageCrop
					_type: "image"
					_key: string
			  }
		>
		_type: "sample"
		_key: string
	}>
} | null
// Variable: pageSlugs
// Query: *[_type == "page" && defined(slug.current)]	{"slug": slug.current}
export type PageSlugsResult = Array<{
	slug: string | null
}>

// Source: ./app/blog/page.tsx
// Variable: postsQuery
// Query: *[_type == "post"]{		...,		author->	}
export type PostsQueryResult = Array<{
	_id: string
	_type: "post"
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	mainImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
	author: {
		_id: string
		_type: "author"
		_createdAt: string
		_updatedAt: string
		_rev: string
		fullName?: string
		slug?: Slug
		photo?: {
			asset?: {
				_ref: string
				_type: "reference"
				_weak?: boolean
				[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
			}
			hotspot?: SanityImageHotspot
			crop?: SanityImageCrop
			alt?: string
			_type: "image"
		}
		roleAndCompany?: string
		biography?: string
	} | null
	categories?: Array<string>
	metadataDescription?: string
	ogImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: "image"
	}
	articleText?: Array<
		| ({
				_key: string
		  } & Youtube)
		| {
				children?: Array<{
					marks?: Array<string>
					text?: string
					_type: "span"
					_key: string
				}>
				style?:
					| "blockquote"
					| "h1"
					| "h2"
					| "h3"
					| "h4"
					| "h5"
					| "h6"
					| "normal"
				listItem?: "bullet" | "number"
				markDefs?: Array<{
					href?: string
					target?: "_blank" | "_parent"
					_type: "link"
					_key: string
				}>
				level?: number
				_type: "block"
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: "reference"
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: "sanity.fileAsset"
				}
				_type: "file"
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: "reference"
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
				}
				hotspot?: SanityImageHotspot
				crop?: SanityImageCrop
				_type: "image"
				_key: string
		  }
	>
	isFeatured?: boolean
	publishDate?: string
}>

// Source: ./app/blog/[slug]/page.tsx
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug][0]{		...,		author->	}
export type PostQueryResult = {
	_id: string
	_type: "post"
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	mainImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
	author: {
		_id: string
		_type: "author"
		_createdAt: string
		_updatedAt: string
		_rev: string
		fullName?: string
		slug?: Slug
		photo?: {
			asset?: {
				_ref: string
				_type: "reference"
				_weak?: boolean
				[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
			}
			hotspot?: SanityImageHotspot
			crop?: SanityImageCrop
			alt?: string
			_type: "image"
		}
		roleAndCompany?: string
		biography?: string
	} | null
	categories?: Array<string>
	metadataDescription?: string
	ogImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: "image"
	}
	articleText?: Array<
		| ({
				_key: string
		  } & Youtube)
		| {
				children?: Array<{
					marks?: Array<string>
					text?: string
					_type: "span"
					_key: string
				}>
				style?:
					| "blockquote"
					| "h1"
					| "h2"
					| "h3"
					| "h4"
					| "h5"
					| "h6"
					| "normal"
				listItem?: "bullet" | "number"
				markDefs?: Array<{
					href?: string
					target?: "_blank" | "_parent"
					_type: "link"
					_key: string
				}>
				level?: number
				_type: "block"
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: "reference"
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: "sanity.fileAsset"
				}
				_type: "file"
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: "reference"
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
				}
				hotspot?: SanityImageHotspot
				crop?: SanityImageCrop
				_type: "image"
				_key: string
		  }
	>
	isFeatured?: boolean
	publishDate?: string
} | null
// Variable: relatedPostsQuery
// Query: *[_type == "post" && slug.current != $slug][0...3]{		...,		author->	}
export type RelatedPostsQueryResult = Array<{
	_id: string
	_type: "post"
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	mainImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		alt?: string
		_type: "image"
	}
	author: {
		_id: string
		_type: "author"
		_createdAt: string
		_updatedAt: string
		_rev: string
		fullName?: string
		slug?: Slug
		photo?: {
			asset?: {
				_ref: string
				_type: "reference"
				_weak?: boolean
				[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
			}
			hotspot?: SanityImageHotspot
			crop?: SanityImageCrop
			alt?: string
			_type: "image"
		}
		roleAndCompany?: string
		biography?: string
	} | null
	categories?: Array<string>
	metadataDescription?: string
	ogImage?: {
		asset?: {
			_ref: string
			_type: "reference"
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
		}
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: "image"
	}
	articleText?: Array<
		| ({
				_key: string
		  } & Youtube)
		| {
				children?: Array<{
					marks?: Array<string>
					text?: string
					_type: "span"
					_key: string
				}>
				style?:
					| "blockquote"
					| "h1"
					| "h2"
					| "h3"
					| "h4"
					| "h5"
					| "h6"
					| "normal"
				listItem?: "bullet" | "number"
				markDefs?: Array<{
					href?: string
					target?: "_blank" | "_parent"
					_type: "link"
					_key: string
				}>
				level?: number
				_type: "block"
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: "reference"
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: "sanity.fileAsset"
				}
				_type: "file"
				_key: string
		  }
		| {
				asset?: {
					_ref: string
					_type: "reference"
					_weak?: boolean
					[internalGroqTypeReferenceTo]?: "sanity.imageAsset"
				}
				hotspot?: SanityImageHotspot
				crop?: SanityImageCrop
				_type: "image"
				_key: string
		  }
	>
	isFeatured?: boolean
	publishDate?: string
}>
// Variable: postSlugs
// Query: *[_type == "post" && defined(slug.current)]{"slug": slug.current}
export type PostSlugsResult = Array<{
	slug: string | null
}>

// Source: ./app/library/sanity/imageMetadata.ts
// Variable: imageQuery
// Query: *[_id == $asset && _type == "sanity.imageAsset"][0]
export type ImageQueryResult = {
	_id: string
	_type: "sanity.imageAsset"
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	metadata?: SanityImageMetadata
	source?: SanityAssetSourceData
} | null

// Query TypeMap
import "@sanity/client"
declare module "@sanity/client" {
	interface SanityQueries {
		'*[_type == "settings"][0]': SettingsQueryResult
		'*[_type == "header"][0]': HeaderQueryResult
		'*[_type == "footer"][0]': FooterQueryResult
		'\n\t*[_type == "page" && defined(slug.current)]\n\t{"slug": slug.current}\n':
			| SitemapPageQueryResult
			| PageSlugsResult
		'\n    *[_type == "post" && defined(slug.current)]{"slug": slug.current}\n':
			| SitemapBlogQueryResult
			| PostSlugsResult
		'\n\t*[_type == "page" && slug.current == $slug][0]\n': PageQueryResult
		'\n\t*[_type == "post"]{\n\t\t...,\n\t\tauthor->\n\t}\n': PostsQueryResult
		'\n\t*[_type == "post" && slug.current == $slug][0]{\n\t\t...,\n\t\tauthor->\n\t}\n': PostQueryResult
		'\n\t*[_type == "post" && slug.current != $slug][0...3]{\n\t\t...,\n\t\tauthor->\n\t}\n': RelatedPostsQueryResult
		'\n\t*[_id == $asset && _type == "sanity.imageAsset"][0]\n': ImageQueryResult
	}
}
